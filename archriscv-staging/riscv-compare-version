#!/usr/bin/python

from collections import defaultdict
import glob
import os
import pyalpm
import sys

RVDBDIR = sys.argv[1]
REPOROOT = sys.argv[2]

x86_handle = pyalpm.Handle(".", "/var/lib/pacman")
rv_handle = pyalpm.Handle(".", f"{RVDBDIR}")

rv_packages = defaultdict(dict)
x86_packages = defaultdict(dict)
pkgbase_map = defaultdict(set)

rv_provides = set()

version_mismatch = set()
db_mismatch = set()

print("""
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js"></script>
<div class="table-responsive-sm"><table class="table table-sm">
<thead><tr><th scope="col">DB</th><th scope="col">Package</th><th scope="col">Status</th></tr></thead><tbody>
""")

def read_db(handle, db, result, build_pkgbase_map=False, check_duplicate=False):
    db_handle = handle.register_syncdb(db, 0)
    for package in db_handle.search(""):
        if check_duplicate and package.name in result:
            print(f"<tr><td>{db}</td><td>{package.name}</td><td><font color=red>Lint: package found in different repository: {result[package.name]['db']}.</font></td></tr>")
        for field in ("depends", "makedepends", "checkdepends", "provides", "arch", "base", "version"):
            result[package.name][field] = getattr(package, field)
        result[package.name]["db"] = db
        if build_pkgbase_map:
            pkgbase_map[result[package.name]["base"]].add(package.name)

for db in ["core", "extra", "community"]:
    read_db(x86_handle, db, x86_packages, build_pkgbase_map=True)
    read_db(rv_handle, db, rv_packages, check_duplicate=True)

rv_provides |= set(rv_packages)

for pkgname, package in rv_packages.copy().items():
    rvver = package["version"]

    if "." in rvver.split("-")[1]:
        rvver = "-".join((rvver.split("-")[0], rvver.split("-")[1].split(".")[0]))

    if pkgname in x86_packages:
        if rvver != x86_packages[pkgname]["version"]:
            version_mismatch.add(pkgname)

    for _package in package["provides"]:
        rv_provides.add(_package.split("=")[0])

def x86_history_link(package):
    if package in x86_packages:
        repo = 'community' if x86_packages[package]["db"] == 'community' else 'packages'
    else:
        repo = 'unsupported'
    return f"https://github.com/archlinux/svntogit-{repo}/commits/packages/{package}/trunk"

broken_pkgs = set()
outdated_logs = set()
for pkgname, package in x86_packages.items():
    if pkgname in broken_pkgs:
        continue

    if os.path.exists(f"{REPOROOT}/.status/logs/{package['base']}"):
        if pkgname in rv_packages:
            rvver = rv_packages[pkgname]["version"]
            if "." in rvver.split("-")[1]:
                rvver = "-".join((rvver.split("-")[0], rvver.split("-")[1].split(".")[0]))
            if rvver == package["version"]:
                continue
            elif not os.path.isfile(f"{REPOROOT}/.status/logs/{package['base']}/{package['base']}-{package['version']}.log") and \
                 not glob.glob(f"{REPOROOT}/.status/logs/{package['base']}/{package['base']}-{package['version']}-*.log"):
                outdated_logs |= pkgbase_map[package['base']]
                continue

        print(f"<tr><td>{package['db']}</td><td>{package['base']}</td><td><a href='logs/{package['base']}/'><font color=red>FTBFS</font></a></td></tr>")
        broken_pkgs |= pkgbase_map[package['base']]

    # Legacy logs
    if os.path.exists(f"{REPOROOT}/.status/logs/{package['base']}.log"):
        if pkgname in rv_packages:
            rvver = rv_packages[pkgname]["version"]
            if "." in rvver.split("-")[1]:
                rvver = "-".join((rvver.split("-")[0], rvver.split("-")[1].split(".")[0]))
            if rvver == package["version"]:
                print(f"<tr><td>{package['db']}</td><td>{package['base']}</td><td><font color=yellow>Please delete obsolete <a href='logs/{package['base']}.log'>log file</a>!</font></td></tr>")
                continue
        broken_pkgs |= pkgbase_map[package['base']]
        print(f"<tr><td>{package['db']}</td><td>{package['base']}</td><td><a href='logs/{package['base']}.log'><font color=red>FTBFS</a></font> (legacy)</a></td></tr>")

def missing_dep(pkgbase):
    check_pkgs = set()
    for pkgname in pkgbase_map[pkgbase]:
        package = x86_packages[pkgname]
        check_pkgs |= set(package["depends"] + package["makedepends"] + package["checkdepends"])
    for dep in check_pkgs:
        for _c in "<", ">", "=":
            dep = dep.split(_c)[0]
        if dep not in rv_provides and dep not in pkgbase_map[pkgbase]:
            return dep

    return False

for package in sorted(version_mismatch):
    if package in broken_pkgs:
        continue
    pkgbase = x86_packages[package]['base']
    rvver = rv_packages[package]["version"]
    x86ver = x86_packages[package]['version']
    cmp = pyalpm.vercmp(rvver, x86ver)
    if cmp < 0:
        verstr = f"<font color=green>{rvver} -> {x86ver}</font>"
    elif cmp > 0:
        verstr = f"<font color=yellow>{rvver} <- {x86ver}</font>"
    verstr += f" <a href={x86_history_link(pkgbase)}>Changes</a>"

    dep = missing_dep(pkgbase)
    if dep:
        verstr += f" <font color=red>Dependency '{dep}' not satisfied.</font>"

    if package in outdated_logs:
        verstr += f" <a href='logs/{pkgbase}/'><font color=yellow>(Outdated FTBFS Logs)</font></a>"

    print(f"<tr><td>{x86_packages[package]['db']}</td><td>{package}</td><td>{verstr}</td></tr>")

for pkgname, package in x86_packages.items():
    if pkgname in rv_packages or pkgname in broken_pkgs:
        continue
    dep = missing_dep(package['base'])
    if dep:
        print(f"<tr><td>{package['db']}</td><td>{pkgname}</td><td><font color=red>Dependency '{dep}' not satisfied.</font></td></tr>")
    else:
        print(f"<tr><td>{package['db']}</td><td>{pkgname}</td><td>Leaf package, port it!</td></tr>")

for pkgname, package in rv_packages.items():
    if pkgname not in x86_packages:
        print(f"<tr><td>{package['db']}</td><td>{pkgname}</td><td><font color=yellow>Lint: package not found in x86 repository.</font></td></tr>")
    elif x86_packages[pkgname]["db"] != package["db"]:
        print(f"<tr><td>{package['db']}</td><td>{pkgname}</td><td><font color=red>Lint: package in different x86 repository: {x86_packages[pkgname]['db']}.</font></td></tr>")

print('</tbody></table></div>')
