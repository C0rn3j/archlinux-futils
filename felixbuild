#!/bin/bash

source /usr/share/makepkg/util/message.sh
colorize

# === Handle server aliases ===
_buildserver=$1

_server=${_buildserver//[0-9]/}
_login=${_buildserver//[a-zA-Z]/}

while read -r abbr addr; do
  if [[ "$_server" == "$abbr" ]]; then
    msg "Building on $abbr"
    BUILDHOST=$addr
    shift
    break
  fi
done < <(cat /etc/felixbuild.d/*)

if [[ -z $BUILDHOST ]]; then
  BUILDHOST=build.archlinux.org
  msg "Building on default $BUILDHOST"
fi

# === Deal with multiple logins (for parallel building) ===
if [[ -z "$_login" ]]; then
  _cmd="$@"
else
  _cmd=
  _login="-l $USER$_login"
  _mark=
  for _part in "$@"; do
    _cmd="$_cmd $_part"
    if [[ -z "$_mark" && "$_part" == "--" ]]; then
      _cmd="$_cmd $_login"
      _mark=1
    fi
  done
  if [[ -z "$_mark" ]]; then
    _cmd="$_cmd -- $_login"
  fi
fi

# === Handle pkgver() ===
if (. PKGBUILD; type pkgver &>/dev/null); then
  msg "Attempt to run pkgver()..."
  makepkg -o
fi

# === Sync package to remote host ===
# Prefer to use rsync here because it's much faster than source packages
# makepkg -Sf --skipchecksums --skippgpcheck || exit 1
# SRCPKG=$(ls *.src.tar.gz)
PKGNAME=$(source PKGBUILD; [[ -z $pkgbase ]] && echo $pkgname || echo $pkgbase)
ARCH=$(source PKGBUILD; echo $arch)
msg "Checking for remote environment..."
ssh $BUILDHOST "mkdir -p packages; test -e .makepkg.conf" || exit 1
msg "Syncing package to remote host..."
rsync -avzzP ./ $BUILDHOST:packages/$PKGNAME/ --exclude=*.src.tar* --exclude=*.pkg.tar* --exclude=src/ --exclude=pkg/ --exclude=.git/ || exit 1

# === Handle validpgpkeys ===
if [[ -n "$(. PKGBUILD; echo $validpgpkeys)" && ! "$_cmd" == *"--skippgpcheck"* ]]; then
  msg "Ensuring required PGP keys are present..."
  for _key in $(source PKGBUILD; echo "${validpgpkeys[@]}" 2>/dev/null); do
    msg2 "Checking for $_key..."
    if ! ssh $BUILDHOST "gpg --recv-keys $_key || gpg --fingerprint $_key >/dev/null 2>&1"; then
      if [[ -f keys/pgp/$_key.asc ]]; then
        msg2 "Importing key from local..."
        ssh $BUILDHOST "gpg --import packages/$PKGNAME/keys/pgp/$_key.asc"
      else
        error "Failed to locate key $_key"
        exit 1
      fi
    fi
  done
fi

# Try to fetch logs
PKGPREFIX=$(source PKGBUILD; echo $PKGNAME-$epoch${epoch:+:}$pkgver-$pkgrel)
fetch_logs() {
  rsync -avzz $BUILDHOST:packages/$PKGNAME/$PKGPREFIX-*.log ./
}
trap fetch_logs EXIT

# === Handle riscv64 patches ===
if [[ "$1" =~ riscv ]]; then
  . /usr/local/bin/riscvenv
  if [[ -d "$RVPATCHREPO/$PKGNAME" ]]; then
    msg "Applying RISC-V patches..."
    rsync -avzzP $RVPATCHREPO/$PKGNAME/ $BUILDHOST:packages/$PKGNAME/
    if [[ -e "$RVPATCHREPO/$PKGNAME/riscv64.patch" ]]; then
      ssh $BUILDHOST "cd packages/$PKGNAME && patch -p0 -i riscv64.patch" || exit 1
      ARCH=$(ssh $BUILDHOST "cd packages/$PKGNAME; source PKGBUILD; echo \$arch")
    fi
  fi
  if [[ ! "$ARCH" =~ any ]]; then
    msg 'Patching arch to riscv64...'
    ssh $BUILDHOST "cd packages/$PKGNAME && setconf PKGBUILD arch '(\"riscv64\")'" || exit 1
  fi

  # Handle cachedir
  _HOME="$(ssh $BUILDHOST 'mkdir -p $HOME/packages/riscv64-pkg-cache; echo $HOME')"
  _oldcmd="$_cmd"
  _cmd=
  _cachedir="-d $_HOME/packages/riscv64-pkg-cache:/var/cache/pacman/pkg"
  _mark=
  for _part in $_oldcmd; do
    _cmd="$_cmd $_part"
    if [[ -z "$_mark" && "$_part" == "--" ]]; then
      _cmd="$_cmd $_cachedir"
      _mark=1
    fi
  done
  if [[ -z "$_mark" ]]; then
    _cmd="$_cmd -- $_cachedir"
  fi
fi

# === Build the package ===
msg "Running $_cmd on remote host..."
ssh -tt $BUILDHOST "cd packages/$PKGNAME && rm -f *.pkg.tar.*; $_cmd" || exit 1

# === Sync back artifacts ===
msg "Syncing back built packages..."
rsync -avzzP $BUILDHOST:packages/$PKGNAME/*.pkg.tar.* ./ || exit 1
