#!/usr/bin/python
import os
import sys
import json
import toposort
import logging
from collections import defaultdict

logging.basicConfig() #format="%(message)s", level=logging.INFO)
pkglist = set(sys.argv[1:])
reverse_deps = defaultdict(set)
deps = defaultdict(set)

with open(os.path.join(sys.path[0], "package.db"), "r") as f:
    package_db = json.load(f)


def cached_get_reverse_dep(pkg):
    if pkg not in reverse_deps:
        if not ({"ghc", "ghc-libs"} & set(package_db[pkg]["depends"])):
           return reverse_deps[pkg]

        for _pkg in package_db:
            if not ({"ghc", "ghc-libs"} & set(package_db[_pkg]["depends"])):
                continue
            if pkg in package_db[_pkg]["depends"] or pkg in package_db[_pkg]["makedepends"] or \
               pkg in package_db[_pkg]["checkdepends"]:
                reverse_deps[pkg].add(_pkg)
                deps[_pkg].add(pkg)

    return reverse_deps[pkg]


# Expand reverse dependencies
while len(pkglist) != len(reverse_deps):
    for pkg in list(pkglist):
        if pkg not in reverse_deps:
            logging.info("Expanding", pkg)
            pkglist |= cached_get_reverse_dep(pkg)
            logging.info("Expanded pkglist to", pkglist)


# Resolve circular dependencies
while True:
    try:
        list(toposort.toposort(deps))
        break
    except toposort.CircularDependencyError as e:
        logging.info("Resolving circular dependency by removing one link:", e.data)
        remove_link = list(e.data.keys())[0]
        for i in range(1, len(e.data)):
            try:
                remove_link_target = list(e.data.keys())[i]
                deps[remove_link].remove(remove_link_target)
                break
            except KeyError:
                pass

# Do sorting
for pkgs in list(toposort.toposort(deps)):
    print(" ".join(pkgs), end=" ")

print()

# logging.info(">>> Rebuild list:")
# print(" ".join(toposort.toposort_flatten(deps)[::-1]))
