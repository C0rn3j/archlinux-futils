#!/usr/bin/python
import os
import sys
import json
import networkx as nx
import logging
from collections import defaultdict

logging.basicConfig(format="%(message)s", level=logging.INFO)
rebuild_list = set(sys.argv[1:])
pkglist = rebuild_list.copy()
reverse_deps = defaultdict(set)
G = nx.DiGraph()

with open(os.path.join(sys.path[0], "package.db"), "r") as f:
    package_db = json.load(f)

for pkg in package_db:
    package_db[pkg]["depends"] = [dep.split("=")[0].split(">")[0].split("<")[0] for dep in package_db[pkg]["depends"]]
    package_db[pkg]["makedepends"] = [dep.split("=")[0].split(">")[0].split("<")[0] for dep in package_db[pkg]["makedepends"]]
    package_db[pkg]["checkdepends"] = [dep.split("=")[0].split(">")[0].split("<")[0] for dep in package_db[pkg]["checkdepends"]]


def cached_get_reverse_dep(pkg):
    if pkg not in reverse_deps:
        if not ({"ghc", "ghc-libs"} & set(package_db[pkg]["depends"])):
           return reverse_deps[pkg]

        for _pkg in package_db:
            if not ({"ghc", "ghc-libs"} & set(package_db[_pkg]["depends"])):
                continue
            if pkg in package_db[_pkg]["depends"] or pkg in package_db[_pkg]["makedepends"] or \
               pkg in package_db[_pkg]["checkdepends"]:
                reverse_deps[pkg].add(_pkg)

    return reverse_deps[pkg]


# Expand reverse dependencies
while len(pkglist) != len(reverse_deps):
    for pkg in list(pkglist):
        if pkg not in reverse_deps:
            pkglist |= cached_get_reverse_dep(pkg)


G.add_nodes_from(reverse_deps.keys())
for dep, pkgs in reverse_deps.items():
    for pkg in pkgs:
        G.add_edge(dep, pkg)


while True:
    try:
        cycle = nx.find_cycle(G)
        cycle_pkgs = set()
        for edge in cycle:
            cycle_pkgs |= {edge[0], edge[1]}
        logging.info("Found circular dependency: " + "<->".join(cycle_pkgs))
        if rebuild_list & set(" ".join(cycle_pkgs).split()):
            new_pkg = ""
            rebuild_pkgs = set()
            for pkg in cycle_pkgs:
                if rebuild_list & set(pkg.split()):
                    new_pkg += pkg + " "
                    rebuild_pkgs.add(pkg)
            new_pkg += " ".join(cycle_pkgs - rebuild_pkgs)
        else:
            new_pkg = " ".join(cycle_pkgs)
        for edge in list(G.edges):
            if edge[0] in cycle_pkgs:
                G.add_edge(new_pkg, edge[1])
            if edge[1] in cycle_pkgs:
                G.add_edge(edge[0], new_pkg)
        G.remove_nodes_from(cycle_pkgs)

    except nx.exception.NetworkXNoCycle:
        break

print(" ".join(nx.lexicographical_topological_sort(G)))
