#!/usr/bin/env python

import os
import sys
import csv
from io import StringIO
from sh import pacman, expac
import requests

# Preset: "arch pkgname": "hackage package name"
PRESET_PACKAGES = {
    "agda": "Agda",
    "alex": "alex",
    "c2hs": "c2hs",
    "cabal-install": "cabal-install",
    "cblrepo": "cblrepo",
    "cgrep": "cgrep",
    "darcs": "darcs",
    "git-annex": "git-annex",
    "git-repair": "git-repair",
    "gtk2hs-buildtools": "gtk2hs-buildtools",
    "haddock": "haddock",
    "happy": "happy",
    "haskell-cabal": "Cabal",
    "haskell-dav": "DAV",
    "haskell-edisonapi": "EdisonAPI",
    "haskell-edisoncore": "EdisonCore",
    "haskell-glob": "Glob",
    "haskell-gtk": "gtk3",
    "haskell-graphscc": "GraphSCC",
    "haskell-http": "HTTP",
    "haskell-hunit": "HUnit",
    "haskell-ifelse": "IfElse",
    "haskell-juicypixels": "JuicyPixels",
    "haskell-listlike": "ListLike",
    "haskell-missingh": "MissingH",
    "haskell-monadrandom": "MonadRandom",
    "haskell-hopenpgp": "hOpenPGP",
    "haskell-optparse-applicative0.12": False,
    "haskell-puremd5": "pureMD5",
    "haskell-quickcheck": "QuickCheck",
    "haskell-ranged-sets": "Ranged-sets",
    "haskell-safesemaphore": "SafeSemaphore",
    "haskell-sha": "SHA",
    "haskell-src-exts": "haskell-src-exts",
    "haskell-src-meta": "haskell-src-meta",
    "haskell-statevar": "StateVar",
    "haskell-stmonadtrans": "STMonadTrans",
    "haskell-turtle1.2": False,
    "haskell-unixutils": "Unixutils",
    "haskell-x11": "X11",
    "haskell-x11-xft": "X11-xft",
    "hasktags": "hasktags",
    "hindent": "hindent",
    "hoogle": "hoogle",
    "hopenpgp-tools": "hopenpgp-tools",
    "idris": "idris",
    "purescript": "purescript",
    "shellcheck": "ShellCheck",
    "stylish-haskell": "stylish-haskell",
    "xmobar": "xmobar",
    "xmonad": "xmonad",
    "xmonad-contrib": "xmonad-contrib",
}

FORMAT = os.environ.get("FORMAT", "hackage")
if FORMAT not in ("hackage", "cblrepo"):
    print("Invalid FORMAT specified")
    sys.exit(1)

URL_PATTERN = "https://www.archlinux.org/packages/community/x86_64/%(pkgname)s"

result_fd = StringIO()
result_csv = csv.writer(result_fd, quoting=csv.QUOTE_ALL)
result_cblrepo = "cblrepo add"
counter = 0

for item in expac("-S", "%P", "community/ghc").split():
    found = False

    # Fetch package and version
    package, version = item.split("=")

    # Remove pkgrel
    version = version.split("-")[0]

    if package in PRESET_PACKAGES:
        found = [PRESET_PACKAGES[package], version]
    elif package.startswith("haskell-"):
        found = [package[8:], version]

    if found:
        print("Found", *found)
        result_cblrepo += " -g " + ",".join(found)
        found.append(URL_PATTERN % {"pkgname": package})
        result_csv.writerow(found)

        counter += 1

result_cblrepo += "\ncblrepo add"

for line in pacman("-Sl", "community", "--color=never"):
    found = False

    # Fetch package and version
    package, version = line.split()[1:3]

    # Remove pkgrel
    version = version.split("-")[0]

    if package in PRESET_PACKAGES:
        found = [PRESET_PACKAGES[package], version]
    elif package.startswith("haskell-"):
        found = [package[8:], version]

    if found and found[0]:
        print("Found", *found)
        result_cblrepo += " " + ",".join(found)
        found.append(URL_PATTERN % {"pkgname": package})
        result_csv.writerow(found)

        counter += 1

result_fd.seek(0)
result_body = result_fd.read().rstrip("\r\n")

print(counter, "packages found.")

if FORMAT == "hackage":
    if "HACKAGE_USERNAME" in os.environ and "HACKAGE_PASSWORD" in os.environ:
        URL = "https://hackage.haskell.org/distro/Arch/packages"
        r = requests.put(
            URL,
            data=result_body,
            auth=(os.environ["HACKAGE_USERNAME"], os.environ["HACKAGE_PASSWORD"]),
            headers={"Content-Type": "text/csv"},
        )
        print("Upload:", r.status_code, r.text)

    else:
        print("Please make sure you have HACKAGE_USERNAME and HACKAGE_PASSWORD set to upload the package list.")

elif FORMAT == "cblrepo":
    print(result_cblrepo)
